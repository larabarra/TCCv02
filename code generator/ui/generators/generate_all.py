
import json
from collections import defaultdict

# Import the modular generator scripts from the same package.
from . import gpio_generator
from . import i2c_generator
from . import uart_generator

# Dispatch table: Maps the 'type' string from the config data
# to the corresponding generator function.
GENERATORS = {
    "GPIO": gpio_generator.generate_gpio_config,
    "I2C": i2c_generator.generate_i2c_config,
    "USART": uart_generator.generate_uart_config,
    "UART": uart_generator.generate_uart_config, # Handle both UART and USART types
}

def load_config_data(json_file_path):
    """Loads configuration data from a JSON file."""
    with open(json_file_path, 'r') as f:
        return json.load(f)


def generate_project_files(config_data):
    """
    Iterates through configuration blocks, groups them by type, and
    calls the appropriate generator function for each type.

    Args:
        config_data (list[dict]): A list of peripheral configuration blocks,
                                  typically loaded from the UI's selections.

    Returns:
        list[str]: A flattened list of all file paths generated by the modules.
    """
    all_generated_files = []
    
    # Group all configuration blocks by their 'type' (e.g., all "I2C" blocks together).
    grouped_configs = defaultdict(list)
    for block in config_data:
        config_type = block.get("type")
        if config_type:
            grouped_configs[config_type].append(block)

    # Iterate through the grouped configurations and call the corresponding generator.
    for config_type, config_list in grouped_configs.items():
        if config_type in GENERATORS:
            generator_func = GENERATORS[config_type]
            print(f"--- Processing: {config_type} ({len(config_list)} instance(s)) ---")
            
            # Call the generator once with all configurations for that type.
            output_filenames = generator_func(config_list)
            
            # Add the returned file paths to the main list.
            if output_filenames:
                all_generated_files.extend(output_filenames)
    
        else:
            print(f"WARNING: Configuration type '{config_type}' has no mapped generator.")
            
    print("\nProject file generation complete!")
    return all_generated_files
