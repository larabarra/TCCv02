
import json
from collections import defaultdict

# Import the modular generator scripts from the same package.
from . import gpio_generator
from . import i2c_generator
from . import uart_generator

# Dispatch table: Maps the 'type' string from the config data
# to the corresponding generator function.
GENERATORS = {
    #"GPIO": gpio_generator.generate_gpio_config,
    "I2C": i2c_generator.generate_i2c_config,
    #"USART": uart_generator.generate_uart_config,
    #"UART": uart_generator.generate_uart_config, # Handle both UART and USART types
}

def load_config_data(json_file_path):
    """Loads configuration data from a JSON file."""
    with open(json_file_path, 'r') as f:
        return json.load(f)


def generate_project_files(pinout_config: dict, peripheral_settings: dict) -> list[str]:
    """
    Iterates through configuration blocks, groups them by type, and
    calls the appropriate generator function for each type.

    Args:
        pinout_config (dict): The entire dictionary loaded from pinout_config.json.
        peripheral_settings (dict): The entire dictionary loaded from peripheral_settings.json.

    Returns:
        list[str]: A flattened list of all file paths generated by the modules.
    """
    all_generated_files = []
    
    # Get the list of peripheral pinout configurations.
    pinout_blocks = pinout_config.get("peripherals", [])
    
    # Group all pinout blocks by their 'type' (e.g., all "I2C" blocks together).
    grouped_pinouts = defaultdict(list)
    for block in pinout_blocks:
        config_type = block.get("type")
        if config_type:
            grouped_pinouts[config_type].append(block)

    # Iterate through the grouped configurations and call the corresponding generator.
    for config_type, pinout_list in grouped_pinouts.items():
        if config_type in GENERATORS:
            generator_func = GENERATORS[config_type]
            print(f"--- Processing: {config_type} ({len(pinout_list)} instance(s)) ---")
            
            # This is the key logic: pass the right data to the right function.
            if config_type == "I2C":
                # The I2C generator needs the list of I2C pinouts and the I2C settings dictionary.
                i2c_settings = peripheral_settings.get("I2C", {})
                output_filenames = generator_func(pinout_list, i2c_settings)
            
            elif config_type in ["UART", "USART"]:
                # The UART generator needs the list of UART pinouts and the UART settings.
                uart_settings = peripheral_settings.get("UART", {})
                output_filenames = generator_func(pinout_list, uart_settings)

            elif config_type == "GPIO":
                # The GPIO generator only needs the list of GPIO pinouts.
                output_filenames = generator_func(pinout_list)

            else:
                # Handle other types if they exist.
                output_filenames = []
                print(f"INFO: No specific settings logic for '{config_type}'.")

            # Add the returned file paths to the main list.
            if output_filenames:
                all_generated_files.extend(output_filenames)
    
        else:
            print(f"WARNING: Configuration type '{config_type}' has no mapped generator.")
            
    print("\nProject file generation complete!")
    return all_generated_files
